<style lang="less">
.container {
	height: 100%;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: space-between;
	box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import fetch from 'src/common/fetch'
console.log('wepy.app', wepy)

export default class extends wepy.app {
	config = {
		pages: [
			'pages/test',
			'pages/pay/index',
			'pages/jump-page',
		],
		window: {
			backgroundTextStyle: 'light',
			navigationBarBackgroundColor: '#fff',
			navigationBarTitleText: 'gauseen',
			navigationBarTextStyle: 'black',
		},
		'tabBar': {
			'color': '#999999',
			'selectedColor': '#ff6a3c',
			'backgroundColor': '#ffffff',
			'borderStyle': 'black',
			'list': [
				{
					'pagePath': 'pages/test',
					'text': '首页',
					'iconPath': 'images/icon_home.png',
					'selectedIconPath': 'images/icon_home_active.png',
				},
				{
					'pagePath': 'pages/test',
					'text': '分类',
					'iconPath': 'images/icon_classify.png',
					'selectedIconPath': 'images/icon_classify_active.png',
				},
				{
					'pagePath': 'pages/test',
					'text': '购物车',
					'iconPath': 'images/icon_shop_cart.png',
					'selectedIconPath': 'images/icon_shop_cart_active.png',
				},
				{
					'pagePath': 'pages/test',
					'text': '我',
					'iconPath': 'images/icon_info.png',
					'selectedIconPath': 'images/icon_info_active.png',
				},
			],
		},
	}

	globalData = {
		userInfo: null,
	}

	constructor () {
		super()
		this.use('requestfix')
		// 拦截 request 请求
		this.intercept('request', {
			// 发出请求的回调函数
			config (params) {
				// params 请求 data
				return params
			},
			// 请求成功后回调函数
			success (params) {
				// do success something
				return params
			},
			// 请求失败回调
			fail (params) {
				// do error something
				return params
			},
			// 请求完成时的回调函数(请求成功或失败都会被执行)
			complete (params) {
				console.log('request complete')
			},
		})
	}

	// 安装自定义中间件
	installMiddleware () {
		fetch(this)
	}

	onLaunch () {
		this.installMiddleware()
		this.testAsync()
	}

	sleep (s) {
		return new Promise((resolve, reject) => {
			setTimeout(() => {
				resolve('promise resolved')
			}, s * 1000)
		})
	}

	async testAsync () {
		const data = await this.sleep(3)
		console.log(data)
	}

	getUserInfo (cb) {
		const that = this
		if (this.globalData.userInfo) {
			return this.globalData.userInfo
		}
		wepy.getUserInfo({
			success (res) {
				that.globalData.userInfo = res.userInfo
				cb && cb(res.userInfo)
			},
		})
	}
}
</script>
